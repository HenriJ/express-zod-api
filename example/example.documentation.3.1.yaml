openapi: 3.1.0
info:
  title: Example API
  version: 10.8.1
paths:
  /v1/user/retrieve:
    get:
      operationId: GetV1UserRetrieve
      responses:
        "200":
          description: GET /v1/user/retrieve Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - data
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    required:
                      - id
                      - name
                      - features
                    properties:
                      id:
                        type: integer
                        format: int64
                        minimum: 0
                        maximum: 9007199254740991
                      name:
                        type: string
                      features:
                        type: array
                        items:
                          type: object
                          required:
                            - title
                            - features
                          properties:
                            title:
                              type: string
                            features:
                              $ref: "#/components/schemas/2048581c137c5b2130eb860e3ae37da196dfc25b"
        "400":
          description: GET /v1/user/retrieve Error response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - error
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Example user retrieval endpoint.
      summary: Retrieves the user.
      tags:
        - users
      parameters:
        - name: id
          in: query
          required: true
          description: a numeric string containing the id of the user
          schema:
            type: string
            pattern: /\d+/
            description: a numeric string containing the id of the user
  "/v1/user/{id}":
    post:
      operationId: PostV1UserId
      responses:
        "200":
          description: POST /v1/user/:id Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - data
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    required:
                      - name
                      - createdAt
                    properties:
                      name:
                        type: string
                      createdAt:
                        description: YYYY-MM-DDTHH:mm:ss.sssZ
                        type: string
                        format: date-time
                        externalDocs:
                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                    example:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
              examples:
                example1:
                  value:
                    status: success
                    data:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
        "400":
          description: POST /v1/user/:id Error response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - error
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Changes the user record. Example user update endpoint.
      summary: Changes the user record. Example user update endpâ€¦
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: POST /v1/user/:id parameter
          examples:
            example1:
              value: "12"
          schema:
            type: string
      requestBody:
        description: POST /v1/user/:id request body
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required:
                    - key
                  properties:
                    key:
                      type: string
                      minLength: 1
                  example:
                    key: 1234-5678-90
                - type: object
                  required:
                    - name
                    - birthday
                  properties:
                    name:
                      type: string
                      minLength: 1
                    birthday:
                      description: YYYY-MM-DDTHH:mm:ss.sssZ
                      type: string
                      format: date-time
                      pattern: ^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?)?Z?$
                      externalDocs:
                        url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                  example:
                    name: John Doe
                    birthday: 1963-04-21
            examples:
              example1:
                value:
                  key: 1234-5678-90
                  name: John Doe
                  birthday: 1963-04-21
      security:
        - APIKEY_1: []
          APIKEY_2: []
  /v1/avatar/send:
    get:
      operationId: GetV1AvatarSend
      responses:
        "200":
          description: GET /v1/avatar/send Successful response
          content:
            image/svg+xml:
              schema:
                type: string
        "400":
          description: GET /v1/avatar/send Error response
          content:
            text/plain:
              schema:
                type: string
      summary: Sends a file content.
      tags:
        - files
        - users
      parameters:
        - name: userId
          in: query
          required: true
          description: GET /v1/avatar/send parameter
          schema:
            type: string
            pattern: /\d+/
  /v1/avatar/stream:
    get:
      operationId: GetV1AvatarStream
      responses:
        "200":
          description: GET /v1/avatar/stream Successful response
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: GET /v1/avatar/stream Error response
          content:
            text/plain:
              schema:
                type: string
      summary: Streams a file content.
      tags:
        - users
        - files
      parameters:
        - name: userId
          in: query
          required: true
          description: GET /v1/avatar/stream parameter
          schema:
            type: string
            pattern: /\d+/
  /v1/avatar/upload:
    post:
      operationId: PostV1AvatarUpload
      responses:
        "200":
          description: POST /v1/avatar/upload Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - data
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    required:
                      - name
                      - size
                      - mime
                      - hash
                      - otherInputs
                    properties:
                      name:
                        type: string
                      size:
                        type: integer
                        format: int64
                        minimum: 0
                        maximum: 9007199254740991
                      mime:
                        type: string
                      hash:
                        type: string
                      otherInputs:
                        type: object
                        additionalProperties:
                          format: any
        "400":
          description: POST /v1/avatar/upload Error response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - error
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Handles a file upload.
      summary: Handles a file upload.
      tags:
        - files
      requestBody:
        description: POST /v1/avatar/upload request body
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - avatar
              properties:
                avatar:
                  type: string
                  format: binary
components:
  schemas:
    2048581c137c5b2130eb860e3ae37da196dfc25b:
      type: array
      items:
        type: object
        required:
          - title
          - features
        properties:
          title:
            type: string
          features:
            $ref: "#/components/schemas/2048581c137c5b2130eb860e3ae37da196dfc25b"
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    APIKEY_1:
      type: apiKey
      in: query
      name: key
    APIKEY_2:
      type: apiKey
      in: header
      name: token
  links: {}
  callbacks: {}
tags:
  - name: users
    description: Everything about the users
  - name: files
    description: Everything about the files processing
servers:
  - url: http://example.com
